# 20 Sentinel - https://github.com/alibaba/Sentinel
   ##20.1 Sentinel vs Hystrix
     1.moniter system; 
     2.Flow control, rate control, service fuse, server degradation;流控，速率控制，服务熔断，服务器降级;

    /watch?v=AUVC8q4m184&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=111
   ##20.2 install and run    
   >java -jar sentinel-dashboard-1.7.0.jar
   >localhost:8080
   >login: sentinel/sentinel
   
   ##20.3 project  cloudalibaba-sentinel-service8401
    1.register this service into Nacos9948;
    2.cloudalibaba-sentinel-service8401 (POM,YML,Main,FlowLimitController)
    3. setup Sentinel8080
    4. setup 8401
    5. Sentinel8080 dashboard
    watch?v=kwfrr6kA9yI&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=113
    pom.xml
    <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
    </dependency>
    <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
    </dependency>
    <!-- 持久化用到 -->
    <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-datasource-nacos</artifactId>
    </dependency>
    <!-- openfeign -->
    <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
    <!-- SpringBoot Web + actuator -->
    <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
     application.yml
     server: port: 8401
     spring: application: name: cloudalibaba-sentinel-service
     spring: cloud:nacos:discovery:server-addr: localhost:8848
     spring: cloud:sentinel:transport:dashboard:localhost:8080
     spring: cloud:sentinel:transport: port: 8719 //default8719
     management:endpoints:web:exposure:include: '*'
 
     java -jar sentinel-dashboard-1.7.0.jar
     1.Blocked by Sentinel (flow limiting) QPS->单机阈值（每秒访问次数）->直接->快速失败；
     2.线程数->单机阈值（每秒访问次数）->直接->快速失败； 限制内部处理的工作线程数；
     watch?v=lJr_MKFT9OM&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=116
     3. 关联 A调用B，B被限制，A也就被限制；
     /watch?v=EKjVFkMPb2w&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=117



  


# 19 Nacos clustor & Persistent Storage by nacos-mysql.sql
   ##19.1 layout
    Require -> Nginx01...Nginx06 -> Nacos01...Nacos03 -> Mysql Clustor(Master&Slave)    
    
   Apache Derby is single database. https://db.apache.org/derby/
   github.com/alibaba/nacos/blob/develop/config/pom.xml
   nacos-mysql.sql in nacos-server-1.1\nacos\conf folder.

   >nacos.io/zh-cn/docs/cluster-mode-quick-start.html
   >nacos.io/zh-cn/docs/deployment.html
   >watch?v=b_X_s-qQs1w&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=106
   >watch?v=2QmCPOUyGAU&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=108

 ## 19.2
   ### USE nacos_config
   ### CREATE DATABASE nacos_config

   spring.datasource.platform=mysql
   db.num=1
   db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
   db.user=nacos_devtest
   db.password=youdontknow

  ## 19.3 
    watch?v=2QmCPOUyGAU&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=108
    >opt/nacos-server-1.1.4.tar.gz
    >tar - zxvf nacos-server-1.1.4.tar.gz
    >nacos
    > cp - r nacos /mynacos
    > cd mynacos

    three Nacos Nodes: 3333,4444,5555;
    Modify startup shell script: startup -p 3333
  ##19.4 Nacos Setup  /watch?v=5w6SAFLCsws&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=109

    > cd /mynacos/nacos/conf; >ll; > nacos-mysql.sql
    > cp appliction.properties.example application.properties ; > pwd;  /mynacos/nacos/conf
    ### In application.properties in /mynacos/nacos/conf
     >>spring.datasource.platform=mysql
     >>db.num=1
     >>db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
     >>db.user=nacos_devtest
     >>db.password=youdontknow
    > !wq
    ###   
    mysql>show database;   // nacos_config
    mysql>use nacos_config
    mysql>show tables;
    ### >cp cluster.conf.example cluster.conf
     > vim /mynacos/nacos/conf/cluster.conf
     >> 192.168.111.144:3333  
     >> 192.168.111.144:4444
     >> 192.168.111.144:5555
    #### IP must be know by hostname -i
    > hostname -i 
    >》 fe80::c7a1:aadb:1249:6c11%ens33 192.168.11.144 192.168.122.1 
    ### Modify ./startup.sh to run ./startup -p 3333
    > cp startup.sh startup.sh.bk
    >vim /mynacos/nacos/bin/startup.sh
    >>while getopts ":m:f:s" opt -> while getopts: ":m:f:s:p:" opt
    >> p)
          PORT=$OPTARG;;
       ?)
     #### nohup $JAVA ${JAVA_OPT} nacos.nacos >>${BASE_DIR}/logs/start.out 2>&1 &
     #### nohup $JAVA -Dserver.port=${PORT} ${JAVA_OPT} nacos.nacos >>${BASE_DIR}/logs/start.out 2>&1 &
    wq!
    >./startup -p 3333
 
 ## 19.5 Nginx Setup
    /watch?v=FwEQB3bq2_M&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=110
   ###
    > cp /usr/local/nginx/conf/nginx.conf nginx.conf.bk
    > vim /usr/local/nginx/conf/nginx.conf
    >> #gzip on;
    >> upstream cluster{
         server 127.0.0.1:3333;
         server 127.0.0.1:4444;
         server 127.0.0.1:5555;
       }
       server{
          listen   1111;
          ...
          location / {
             #root html;
             #index index.html index.htm;
             proxy_pass http://cluster;
          }
       } 
    ###> ./mynacos/nacos/bin/startup.sh -p 3333
      > ./mynacos/nacos/bin/startup.sh -p 4444 
      > ./mynacos/nacos/bin/startup.sh -p 5555  
     bin> ps -ef|grep nacos|grep -v grep |wc -l;
     bin> 3
     >/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf  ;;
     > ps -ef|grep nginx

    ### /watch?v=FwEQB3bq2_M&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=110
    >test：http://192.168.111.144:1111/nacos/#login
    mysql> select * from config_info;

--------------------------------------------------
               (Nacos Client:9002)
                     |
               (NGINX:1111)
        |            |                     |
(Nacos Server1:3333) (Nacos Server2:4444)  (Nacos Server3:5555)
             \       |      /
               (Mysql : 3306)
--------------------------------------------------

# 18 github.com/alibaba/nacos/blob/develop/config/pom.xml
    > group: TEST_GROUP
    > group: DEV_GROUP
    >namespace: 7df0f5a-6a53-4785-9686-dd460158e5d4
    >If we do not set up namespace, config source is "public" namespace.
    >namespace: 7df0f5a-6a53-4785-9686-dd460158e5d4  # It is namespace ID.
# 17 Nacos config  https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples
     ##17.1
     cloudalibaba-config-nacos-client3377
     spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html
        <!--需要引入该jar才能使bootstrap配置文件生效-->
        <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
     
    ## bootstrap.yml 
    server.port=3377
    spring.application.name=nacos-config-client
    spring.cloud.nacos.discovery.server-addr=localhost:8848
    spring.cloud.nacos.config.server-addr=localhost:8848
                             .file-extension=yaml
    ## application.yml
    ## localhost:8848/nacos
     Data ID:nacos-config-client-dev.yaml
     Group: DEFAULT_GROUP
     Configuration Content: config: 
                              info: v3       
    ##@RefreshScope & Data ID = ${spring:application:name}-${spring:profiles:active}.yaml
    localhost:8848  nacos/nacos

# 16 Nacos Naming Configuration  Service
     Nacos = Eureka + Config+Bus
     https://github.com/alibaba/Nacos   nacos.io
     https://github.com/alibaba/Nacos/releases

     start: /bin/startup.cmd
     localhost:8848/nacos/#/login    username: nacos/nacos
 
 ## 16.1 cloudalibaba-provider-payment9001
     <dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>2020.0.2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.alibaba.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>2.2.5.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html

     <dependency>
       <groupId>com.alibaba.cloud</groupId>
       <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
     </dependency>

     server.port=9001
     spring.application.name=nacos-email-provider
     spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
     management.endpoints.web.exposure.include=*
     
     @EnableDiscoveryClient // when it was removed, Nacos still can show it.  

 ##16.2 cloudalibaba-consumer-nacos-order83
   ###16.2.1application.properties/application.yml
   spring.application.name=nacos-email-consumer
   spring.cloud.nacos.discovery.server-addr=localhost:8848
   service-url.nacos-user-service=http://nacos-email-provider
   ###16.2.2 @SpringBootApplication with @EnableDiscoveryClient
   ###16.2.3 RestTemplate 
    
    @Configuration
    public class ApplicationContextConfig {
    @Bean
    @LoadBalanced
    public RestTemplate getRestTemplate(){
        return new RestTemplate();
    }    } 

   ###16.2.4
     @Value("${service-url.nacos-user-service}")
     private String INVOKE_URL; 
     String result = restTemplate.getForObject(INVOKE_URL+"/email/nacos/"+id,String.class);

# 15 github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md
     sping-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html
 
# 14 consul.io/intro/index.html  thank zhong yang.
  ## 14.1 springcloud.cc/spring-cloud-consul.html 
     learn.hashicorp.com/consul/getting-started/install.html
     consul --version
     consul agent -dev  //run and then, will generate a service localhost:8500

  ## 14.2 cloud-providerconsul-payment8006, cloud-consumerconsul-order80
      <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-discovery</artifactId>
      </dependency>

# 13 cloud-consumerzk-order80  zookeepr
    @Configuration
    public class ApplicationContextConfig
    {
        @Bean
        @LoadBalanced
        public RestTemplate getRestTemplate(){
            return new RestTemplate();
        }
    } 
# 12 cloud-provider-payment8004 zookeepr
  spring.cloud.zookeeper.connect-string=192.168.101.166:2161
    cloud:
      zookeeper:
        connect-string: 192.168.101.166:2161
# 11 @EnableDiscoveryClient with @SpringBootApplication
## 11.1 import org.springframework.cloud.client.discovery.DiscoveryClient;
    @GetMapping(value="/payment/discovery")
    public Object discovery(){
        List<String> services = discoveryClient.getServices();
        for(String e:services)
        {
            log.info("******element:"+e);
        }
        List<ServiceInstance> instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");
        for(ServiceInstance i: instances){
            log.info(i.getServiceId()+"\t"+i.getHost()+"\t"+i.getPort()+"\t"+i.getUri());
        }
        //        var a = new Object(services,instances);
        return this.discoveryClient;
    }
## 11.2 **Red Safe**  eureka.server.enable-self-preservation 
>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
>**In Eureka Server**
>>*default:* eureka.server.enable-self-preservation=true
>>eureka.server.eviction-interval-timer-in-ms: 2000
>>>    server:
>>>       enable-self-preservation: false
>>>       eviction-interval-timer-in-ms: 2000
>>> *THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.*

>**In Service server**
>>instance.lease-renewal-interval-in-seconds: 1 #default 30
>>instance.lease-expiration-duration-in-seconds: 2 #default 90
## 11.3 https://github.com/Netflix/eureka/wiki
# 10 cloud-eureka-server7001 
# 10.4 @LoadBalanced on RestTemplate and "http://CLOUD-PAYMENT-SERVICE" matched spring.application.name=cloud-payment-service
    spring:
      application:
        name: cloud-payment-service  # = CLOUD-PAYMENT-SERVICE
 *@LoadBalanced must be with using 'http://spring.application.name'*
 *instance.instance-id*: payment8001, *instance-id* showing in Status of Eureka dashboard
 *instance.prefer-ip-address*: true  #default true

# 10.3  clustor Eureka
    ** c:\Windows\System32\drivers\etc\hosts **
     127.0.0.1:7001 eureka7001.com
     127.0.0.1:7002 eureka7002.com 
# 10.2 @EnableEurekaClient
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
eureka:
  client:
    register-with-eureka: true
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:7001/eureka

# 10.1 @EnableEurekaServer single server.
       pom.xml 
       <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
            <!--        <version>3.0.3</version>-->
        </dependency>
   application.yml
eureka:
  instance:
    hostname: localhost
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

# 9 Code refactoring: cloud-api-commons
# 8 消费者cloud-consumer-order80
https://www.youtube.com/watch?v=8d6BvCZxPwQ&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=12
## 8.1 建module
## 8.2 改POM
## 8.3 写YML
## 8.4 主启动
## 8.5 业务类
RestTemplate
@RequestBody Payment payment
workspace.xml RunDashboard;

#18 Nacos- Naming Configuration Service
Nacos = Eureka+Config+Bus
github.com/alibaba/Nacos
https://github.com/alibaba/nacos/releases/tag/1.4.1
nacos.io/zh-cn/docs/cluster-mode-quick-start.html


https://www.youtube.com/watch?v=FMpIM5yS-SY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=96
https://www.youtube.com/watch?v=cwDUUhr4sOU&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=97

#17 Spring Cloud Alibaba
https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md
https://github.com/alibaba/spring-cloud-alibaba/
官网的参考手册：
https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html

#16 Spring Stream
https://www.youtube.com/watch?v=_x6eKocc0_8&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=86 
RabbitMQ有exchange, Kafka有Topic和Partitions区分；
Binder

#7 entities,dao,service,mapper
https://www.youtube.com/watch?v=vaTDClYcjIc&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=11
##7.1 create SQL; 
#6高并发高流量高可靠性
1000 QPS,  1百万 QPS;https://www.youtube.com/watch?v=SmkjJ7SQKBo
www.jianshu.com/p/251b76643d47 RocketMQ
High Concurrency and large flow, High Avaliablility： https://www.youtube.com/watch?v=SmkjJ7SQKBo  统一Id
#5. 热部署在Intellj中
##5.1 Adding devtools to your project
##5.2 Adding plugin to your pom.xml
##5.3 Enabling automatic build
##5.4 Update the value of
##5.5 重启IDEA
##5.1 Adding devtools to your project
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

##5.2 Adding plugin to your pom.xml （父工程中的pom.xml）
  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
            <exclude>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-configuration-processor</artifactId>
            </exclude>
          </excludes>
          <fork>true</fork>
          <addResources>true</addResources>
        </configuration>
      </plugin>
    </plugins>
  </build>
##5.3 Enabling automatic build
 File->Settings->Build,Execution,Deployment->Compiler->选上4个选项：
     Automatically show first error in editor; Display notification on build completion; Build project automatically;Compile independent mdules in parallel;

##5.4 Update the value of
 同时按下：ctrl+shift+Alt+/ and search for the registry. In the Registry, enable:
  compiler.automake.allow.when.app.running and actionSystem.assertFocusAccessFromEdt.

##5.5 重启IDEA

#4. 
##4.3 45.76.1.198:3306/root,schema:tivdb

##4.2 install docker on Kali
->sudo apt update
->curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
->sudo apt-get install gnupg
->echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | sudo tee /etc/apt/sources.list.d/docker.list
->sudo apt update
->sudo apt remove docker docker-engine docker.io
->sudo apt install docker-ce -y
->sudo systemctl start docker 或者 sudo /etc/init.d/docker start 
或者sudo service docker start

What you have to do is, run the linux subsystem as administrator by right clicking from start menu.
This will solve the issue and sudo service command will execute as it should as a sudo user.

systemd 
##4.1 install yum
->wget http://yum.baseurl.org/download/3.4/yum-3.4.3.tar.gz
->tar xvf yum-3.4.3.tar.gz
->cd yum-3.4.3
在Kali上没有成功
->sudo apt-get install yum
   sudo yum install docker
sudo apt install yum
yum check-update
yum update
yum clean all

#3.建微服务模块
##3.1 建module
##3.2 改POM
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>cloud20210413</artifactId>
        <groupId>com.jin.springcloud</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>cloud-provider-payment8001</artifactId>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.2.5</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
##3.3 写YML
server:
  port: 8081

spring:
  application:
    name: cloud-payment-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/db2021?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: Tw123456

  datasource2:
    url: jdbc:mysql://localhost:3306/sp_mall?useSSL=false&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: sQdAAj8eHN8yCXGn
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: jin.springcloud.entities    #所有entity别名类所在包


##3.4 主启动
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PaymentMain8001 {
    public static void main(String[] args){
        SpringApplication.run(PaymentMain8001.class, args);
    }
}
##3.5 业务类
### cloud-provider-payment8001微服务提供者支付Module模块
###   cloud-consumer-order80微服务消费者订单Module模块
CREATE TABLE test_payment(
id bigint(20) not null PRIMARY KEY auto_increment,
serial varchar(200) DEFAULT ''
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci;

Create table 'testpayment'(
'id' bigint(20) not null auto_increment comment 'id',
'serial' varchar(200) DEFAULT '',
PRIMARY KEY('id')
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4

#2.pom 父工程的POM
<packaging>pom</packaging>
<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!-- $Id: pom.xml 642118 2008-03-28 08:04:16Z reinhard $ -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <name>cloud20210413</name>
  <groupId>com.jin.springcloud</groupId>
  <artifactId>cloud20210413</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <!-- Version -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <junit.version>4.12</junit.version>
    <log4j.version>1.2.17</log4j.version>
    <lombok.version>1.16.18</lombok.version>
    <mysql.version>5.1.47</mysql.version>
    <druid.version>1.2.5</druid.version>
<!--    <mybatis.spring.boot.version1>1.3.0</mybatis.spring.boot.version1>-->
    <mybatis.spring.boot.version>2.1.4</mybatis.spring.boot.version>
  </properties>
  <!-- sub module: in sub module, do not need set groupId and version -->
  <dependencyManagement>
    <dependencies>
      <!--spring boot 2.4.4-->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.4.4</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--spring cloud-->
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>2020.0.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--spring cloud alibaba-->
      <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-alibaba-dependencies</artifactId>
        <version>2.2.5.RELEASE</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--mysql-->
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysql.version}</version>
      </dependency>
      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>druid</artifactId>
        <version>${druid.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>${mybatis.spring.boot.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
---------------------------------------------------------
#1.搭建工作空间workspace
##5.File Type过滤
  
##4.Java Compilerjava编译版本选8
  File->Build,Execution,Deployment->Compiler->Java Compiler->Module,Target bytecode version = 8;

##3.注解生效激活
  File->Build,Execution,Deployment->Compiler->Annotation Processors->Enable annotation processing(checked)

##2.Editor编辑器编码
 File->Settings->Editor->File Encodings -》 Global Encoding: UTF-8; Project Encoding: UTF-8; Default encoding for properties files: UTF-8; Transparent native-to-ascii conversion (checked)

##1.create new project
maven->create from archetype->maven-archetype-site
manve home path:C:/Users/JinTweebaa/.m2/wrapper/dists/apache-maven-3.6.3-bin/1iopthnavndlasol9gbrbg6bf2/apache-maven-3.6.3
User setting file:c:\users\jintweebaa\.m2\setting.xml
Local respository:c:\users\jintweebaa\.m2\repository

----------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=4wWM7MmfxXw&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=9
https://www.youtube.com/watch?v=AOepp1XLSR0&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=61
https://www.youtube.com/watch?v=TveD81ACbyw&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=31
https://www.youtube.com/watch?v=_1Y41mdkOSY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=40 轮询 负载平衡 Ribbon
https://www.youtube.com/watch?v=Kkuqnkl9zOo&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=101
https://www.youtube.com/watch?v=qjOgz6K_Ums&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=107
namespace: 7df0f5a-6a53-4785-9686-dd460158e5d4
tools: Kali Linux

Thank Zhou Yang of Shang Gui Gu