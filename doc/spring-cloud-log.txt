
# 22 https://github.com/zhouzhipeng/dubbo-beginner-demo
    ES /watch?v=zNHDc2_-YOQ&list=PLmOn9nNkQxJFHUotFWLEDHUVF7N8mEY6D
    id /watch?v=5GJ-VoZM1Ek&list=PLmOn9nNkQxJGoM5wAmvrumw3kNrfRPv_L&index=25
    lidicity.com
    /watch?v=USOM7AfVbHQ&list=PL-eCVzFY1qNKp1LbotiTxUkaKDmp8NQg9
    private final static long START_STMP = 1480166465631L; //41 bits //2016-11-26 21:21:05
    https://tool.lu/timestamp/ //1623990673000L; //2021-06-18 12:31:13
    /watch?v=ue1zjvK0Yiw&list=PLmOn9nNkQxJGoM5wAmvrumw3kNrfRPv_L&index=27
    ## mybatis
    import org.apache.ibatis.annotations.Mapper; https://github.com/mybatis/mybatis-3/tree/master/src/site
    https://blog.mybatis.org/p/products.html
    seata mybits: Dao:    /watch?v=jo6uMqULrMY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=143
    ## Error : 'DataSourceProxy' is abstract; cannot be instantiated;
     /watch?v=jo6uMqULrMY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=144
    seata-storage-service2002/watch?v=YtxruZMXVbo&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=145
    1.seata-storage-service2002;2.POM;3.yml(mybatis.mapperLocations.classpath:mapper/*.xml);
        4.file.conf;5.registry.conf;6.domain(entity==domain==dto==vo);
        7.dao (@Mapper->resource/mapper->mybatis.mapperLocations.classpath:mapper/*.xml);
        8.service $ implement; 9.Controller, 10.config; 11.SpringApplication.run().                           

    ## seata-account-service2003 
       /watch?v=Xl7YA1lhFOw&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=146
        1.seata-account-service2003;2.POM;3.yml(mybatis.mapperLocations.classpath:mapper/*.xml);
        4.file.conf;5.registry.conf;6.domain(entity==domain==dto==vo);
        7.dao (@Mapper->resource/mapper->mybatis.mapperLocations.classpath:mapper/*.xml);
        8.service $ implement; 9.Controller, 10.config; 11.SpringApplication.run().        

    ## @GlobalTransactional
      /watch?v=Srh-1J2hZDc&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=147   
       http://localhost:2001/order/create/?userId=1&productId=1&count=10&money=100
       // @EnableFeignClients default waiting times is 1 second.
         // Read timed out executing POST http://seata-account-service/account/decrease?userId=1&money=100
         // Feign 超时时，有重试机制。
       // try{TimeUnit.SECONDS.sleep(20);}catch (InterruptedException e){e.printStackTrace();}            


# 21 Seata distributed transaction solution.
    ## Simple Extensible Autonomous Transaction Architecture(SEATA)简单可扩展自治事务框架.
    201901， 开源，v0.0.9版本不支持集群。
    2020以后，产品环境需要SEATA v1.0.0-GA以上。 阿里云中为GTS服务（采用AT模式）。 
    ## TC，TM，RM
    TC： SEATA server side；  TM： 标有@GlobalTransactional为TM；事务的发起方； RM： 事务的参与方（单个数据库）；
    ### UUID(Universally Unique Identifier) 
    In its canonical textual representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16) digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 hexadecimal characters and 4 hyphens)
    全局唯一；趋势递增；单调递增；信息安全；含时间戳；高可用；低延迟；高QPS； 
    ###MySQL
    数据库的自增ID和mysql数据库的replace into实现的；
    ：replace into 首先尝试插入数据列表中，如果发现表中已经有此行数据（根据主键和唯一索引判断），则先删除，而后插入，否则直接插入新记录。
    ###Redis
    ：Redis 6v之前是单线程，可以使用原子操作INCR和INCRBY来实现。注意：在Redis集群情况下，同样和MySQL一样需要设置不同的增长步长，同时key一定要设置有效期。
    可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1，2，3，4，5，然后步长都是5。
    各个Redis生成的ID为： A: 1,6,11,16,21; B: 2,7,12,17,22; C:3,8,13,18,23; D:4,9,14,19,24; E: 5,10,15,20,25;
    ###snowflake
    Twitter的分布式自增ID算法snowflake; 每秒能够产生26万个自增可排序的ID。
       https://developer.twitter.com/en/docs/twitter-ids
       https://github.com/twitter-archive/snowflake   
       tool.lu/hexconvert
      1.twitter的Snowflake生成ID能够按照时间有序生成；
      2.Twitter IDs are unique 64-bit unsigned integers, which are based on time, instead of being sequential.
        （为一个Long型，转换为字符串后长度最多19） 
      3.The full ID is composed of a timestamp, a worker number, and a sequence number.
        （或由datacenter和workerId做区分） https://github.com/twitter-archive/snowflake
         2^1 =  1bit符号位；固定为0，表示正数；
         2^41 (365*24*60*60*1000L)=69.73年；（0--2^41-1）
         2^10 =1024;(5bit datacenterId + 5bit workerId)
         2^12*1000=409.6万；2^12-1=4095个Id序列号；毫秒内产生的Id。
       在Java中64bit的整数是long类型，所以在SnowFlake算法生成的id就是long来存储的。
     
     ####hutool-captcha 	图片验证码实现
     https://github.com/looly/hutool/ or https://github.com/dromara/hutool
     hutool-captcha 	图片验证码实现
     1.millisecond 毫秒在高位，自增序列在地位，整个ID是趋势递增。
     2.不依赖数据库等第三方系统，以服务去方式部署，稳定性高，生成ID的性能也非常高。
     3.可以根据自身业务特点分配bits位，比较灵活。
     
     1.依赖机器时钟，如果机器时钟回拨，会导致重复ID产生。
     2.在单机上是递增的（趋势递增），但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，有时会出现不是全局递增的情况。
     
     ###UidGenerator 百度
     ###Leaf 美团点评     

   GTS(Global Transaction Service) Partion tolerance  CAP 全局数据一致 
   watch?v=PGWVBbY1OsM&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=138
   ## In file.conf
   If mode = "file"
     
   If mode = "db"
    url = "jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true"
    user = "mysql"
    password = "mysql"
    create a database "seata" in mysql.
    sh seata-server.sh -p 8091 -h 127.0.0.1 -m file
    cmd seata-server.bat
    @GlobalTransactional 注解在业务方法上


    ## In registry.conf
     type = "nacos"
     nacos {
        serverAddr = "localhost:8848"
        namespace = ""
        cluster = "default"
     }
    http://seata.io/zh-cn/docs/user/quickstart.html
    First start Nacos, then start Seata;
    
    ## 1. start Nacos;
    startup.cmd
    http://192.168.1.4:8848/nacos/index.html
      2. start Seata;
       cd C:\Users\JinXxxx\Downloads\springprojects\seata\seata-server-1.4.2\bin
       seata-server.bat

    ## Mysql
     DROP DATABASE IF EXISTS seata; 
     -- All new databases should use utf8mb4
     CREATE DATABASE seata CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

    Create database seata_order;
    CREATE DATABASE seata_storage;
    CREATE DATABASE seata_account;
       SEATA AT 模式需要 UNDO_LOG 表
    -- 注意此处0.3.0+ 增加唯一索引 ux_undo_log
    CREATE TABLE `undo_log` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `branch_id` bigint(20) NOT NULL,
      `xid` varchar(100) NOT NULL,
      `context` varchar(128) NOT NULL,
      `rollback_info` longblob NOT NULL,
      `log_status` int(11) NOT NULL,
      `log_created` datetime NOT NULL,
      `log_modified` datetime NOT NULL,
      `ext` varchar(100) DEFAULT NULL,
      PRIMARY KEY (`id`),
      UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)
    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

    DROP TABLE IF EXISTS `storage_tbl`;
    CREATE TABLE `storage_tbl` (
      `id` int(11) NOT NULL AUTO_INCREMENT,
      `commodity_code` varchar(255) DEFAULT NULL,
      `count` int(11) DEFAULT 0,
      PRIMARY KEY (`id`),
      UNIQUE KEY (`commodity_code`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

    DROP TABLE IF EXISTS `order_tbl`;
    CREATE TABLE `order_tbl` (
      `id` int(11) NOT NULL AUTO_INCREMENT,
      `user_id` varchar(255) DEFAULT NULL,
      `commodity_code` varchar(255) DEFAULT NULL,
      `count` int(11) DEFAULT 0,
      `money` int(11) DEFAULT 0,
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

    DROP TABLE IF EXISTS `account_tbl`;
    CREATE TABLE `account_tbl` (
      `id` int(11) NOT NULL AUTO_INCREMENT,
      `user_id` varchar(255) DEFAULT NULL,
      `money` int(11) DEFAULT 0,
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
     /watch?v=cxzYBDboya0&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=142  
     seata-order-service2001
     entity==domain==dto==vo viewObject valueObject
     https://github.com/seata/seata-samples/tree/master/seata-spring-boot-starter-samples
     create order -> reduce store -> reduce balance -> change order status;
     https://github.com/seata/seat/release
     Distributed Transaction : @GlobalTransactional
      @Transactional and @GlobalTransactional; TC, TM, RM; RPC;
     seata.io/zh-cn/   and https://github.com/alibaba/druid 
     file.conf : service and store;
     DataWorks : https://help.aliyun.com/document_detail/113429.html?spm=a2c4g.11186623.2.5.4e466a4deXyAJj

   
# 20 Sentinel - https://github.com/alibaba/Sentinel  

   com.alibaba.csp.sentinel.slots.block.flow.controller.RateLimiter
   ##20.1 Sentinel vs Hystrix
     1.moniter system; 
     2.Flow control, rate control, service fuse, server degradation;流控，速率控制，服务熔断，服务器降级;

    /watch?v=AUVC8q4m184&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=111
   ##20.2 install and run    
   >java -jar sentinel-dashboard-1.7.0.jar
   >localhost:8080
   >login: sentinel/sentinel
   
   ##20.3 project  cloudalibaba-sentinel-service8401
    1.register this service into Nacos9948;
    2.cloudalibaba-sentinel-service8401 (POM,YML,Main,FlowLimitController)
    3. setup Sentinel8080
    4. setup 8401
    5. Sentinel8080 dashboard
    watch?v=kwfrr6kA9yI&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=113
    pom.xml
    <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
    </dependency>
    <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
    </dependency>
    <!-- 持久化用到 -->
    <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-datasource-nacos</artifactId>
    </dependency>
    <!-- openfeign -->
    <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
    <!-- SpringBoot Web + actuator -->
    <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
     application.yml
     server: port: 8401
     spring: application: name: cloudalibaba-sentinel-service
     spring: cloud:nacos:discovery:server-addr: localhost:8848
     spring: cloud:sentinel:transport:dashboard:localhost:8080
     spring: cloud:sentinel:transport: port: 8719 //default8719
     management:endpoints:web:exposure:include: '*'
 
     java -jar sentinel-dashboard-1.7.0.jar
     ###流控规则 流控模式
     1.Blocked by Sentinel (flow limiting) QPS->单机阈值（每秒访问次数）->直接->快速失败； 
     2.线程数->单机阈值（每秒访问次数）->直接->快速失败； 限制内部处理的工作线程数；
       TimeUnit.MILLISECONDS.sleep(800);
     /watch?v=lJr_MKFT9OM&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=116
     3. 关联 A调用B，B被限制，A也就被限制；设置A的关联控制，检查B的调用情况，如果B满足条件,就限流A；
     /watch?v=EKjVFkMPb2w&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=117
     /watch?v=T1PROlROf0k&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=118
     
     流控结果：
     1.Blocked by Sentinel (flow limiting)直接报错
     com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController
     2.Warm UP预热  coldFactor=3,  QPS=threshold/3开始，经过设定的预热时长才逐渐升至设定的QPS阈值。
     com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController
     3.排队等待; 等待超时时间；  漏桶算法；
      Log.info(Thread.currentThread().getName()+"\t"+"...testB");

     ###降级规则：watch?v=DaQ_p2R2OY8&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=120
     github.com/alibaba/Sentinel/wiki/熔断降级
     1.RT, 如果在RT的值超过了设定时间，即请求处理时间在RT的时间内没有处理完成，那在下个时间窗口内，此API就被熔断，直接返回Blocked by Sentinel。
     @GetMapping("/testD")
     public String testD(){
        try{TimeUnit.SECONDS.sleep(1);}catch(InterruptedException e)
        {e.printStackTrace();}
        log.info("testD test RT");
        return "------testD";
     }
     
     2. 异常比例,  异常比例超出了设定的异常比例， 那在下一个时间窗口内，就熔断。
      watch?v=DhauRvMvti0&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=122
      log.inf("testD 异常比例");
      int age = 10/0;
     3. 异常数 ， 时间窗口一定要>60秒；
     @GetMapping("/testE")
     public String testE(){
        
        log.info("testE test Exception number");
        int age = 10/0;
        return "------testE Exception number";
     }


     ###Sentinel热点key： github.com/alibaba/Sentinel/wiki/   仅支持QPS；github.com/alibaba/Sentinel/wiki/热点参数限流
     watch?v=gaI0JUKBFbc&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=124 
     HystrixCommand to @SentinelResource 自定义限流提示 （参数例外项，热点参数必须是基本类型或String）
     com.alibaba.csp.sentinel.slots.block.BlockException
    import com.alibaba.csp.sentinel.annotation.SentinelResource;
    import com.alibaba.csp.sentinel.slots.block.BlockException;
    @GetMapping("/testHotKey")
    @SentinelResource(value="testHotKey",blockHandler = "deal_testHotKey")
    public String testHotKey(@RequestParam(value="p1",required=false) String p1,
                             @RequestParam(value="p2",required=false) String p2  ){
        return "------testHotKey";
    }
    public String deal_testHotKey(String p1,String p2,BlockException exception){
        return "------deal_testHotKey blockHandler";
    }
    cd C:\Users\Jinxxx\Downloads\springprojects\sentinel
    java -jar sentinel-dashboard-1.8.1.jar 
    /watch?v=4Wey7rVAcFg&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=126
    ###系统规则： github.com/alibaba/Sentinel/wiki/系统自适应限流     
     Load  整体限流
    
    从HystrixCommand到@SentinelResource
    /watch?v=i800sXAG-UQ&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=128
    按资源名称限流
    <dependency>
            <groupId>com.jin.springcloud</groupId>
            <artifactId>cloud-api-commons</artifactId>
            <version>${project.version}</version>
        </dependency>
    @GetMapping("/rateLimit/byUrl")
    @SentinelResource(value="byUrl")
    public String byUrl(){
        return "------byUrl";
    }
    /watch?v=u87-7nTVnbw&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=129
    //CustomerBlockHandler
    public class CustomerBlockHandler {
      public static CommonResult handlerException(BlockException exception){
          return new CommonResult(4444,"客户自定义，global handlerException---1");
      }
      public static CommonResult handlerException2(BlockException exception){
          return new CommonResult(4444,"客户自定义，global handlerException---2");
      }
    }
    //CustomerBlockHandler
    @GetMapping("/rateLimit/customerBlockHandler")
    @SentinelResource(value="customerBlockHandler",
            blockHandlerClass = CustomerBlockHandler.class,
            blockHandler = "handlerException2")
    public CommonResult CustomerBlockHandler(){
        return new CommonResult(200,"客户自定义",new Payment(2020L,"serial003"));
    }
    github.com/alibaba/Sentinel/wiki/介绍
    cd C:\Users\Jinxxx\Downloads\springprojects\sentinel
    cd Downloads\springprojects\sentinel
    java -jar sentinel-dashboard-1.8.1.jar  
    localhost:8080 sentinel/sentinel
    http://localhost:8401/rateLimit/customerBlockHandler
 
    watch?v=waPgYi6wfQI&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=130
    cd C:\Users\Jinxxx\Downloads\springprojects\nacos\nacos-server-1.4.2\bin
    cd Downloads\springprojects\nacos\nacos-server-1.4.2\bin
    https://www.programmersought.com/article/74436903789/
    modify startup.cmd: rem set MODE="cluster"
    set MODE="standalone"
    startup.cmd
    http://192.168.1.4:8848/nacos/index.html

    84-》9003/9004熔断 
    cloudalibaa-consumer-nacos-order84,cloudalibaba-provider-payment9003/9004
    dependency:
    1.,spring-cloud-starter-bootstrap, org.springframework.cloud (为使bootstrap.yml生效)

    1.com.alibaba.cloud,spring-cloud-starter-alibaba-nacos-discovery
    2.com.jin.springcloud,cloud-api-commons,${project.version}
    3.org.springframework.boot,spring-boot-starter-web,
    4.org.springframework.boot,spring-boot-starter-actuator
         
         <dependency>
	   <groupId>com.alibaba.cloud</groupId>
	   <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
	 </dependency>
     <!-- normal -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>5.3.5</version>
        </dependency>
    
        ###Ribbon
        @Configuration
        public class ApplicationContextConfig
        {
          @Bean
          @LoadBalanced
          public RestTemplate getRestTemplate(){
            return new RestTemplate();
         }
        }
        对@SentinelResource注解的属性修改，需要手动重启84服务。
        fallback对应运行异常； blockHandler对应Sentinel设置违规；
        watch?v=waPgYi6wfQI&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=131
        @SentinelResource(value="fallback",fallback = "handlerFallback",blockHandler = "blockHandler")
 
        ###OpenFeign   Error, it does not work
        /watch?v=C3VTLMAXw48&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=136
        1.in POM;
        <!--SpringCloud ailibaba nacos -->
         <dependency>
	   <groupId>com.alibaba.cloud</groupId>
	   <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
	 </dependency>
        <!--SpringCloud ailibaba sentinel -->
         <dependency>
	   <groupId>com.alibaba.cloud</groupId>
	   <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
	 </dependency>
        <!--SpringCloud openfeign -->
         <dependency>
	   <groupId>org.springframework.cloud</groupId>
	   <artifactId>spring-cloud-starter-openfeign</artifactId>
	 </dependency>
        <!--private apis -->
         <dependency>
            <groupId>com.jin.springcloud</groupId>
            <artifactId>cloud-api-commons</artifactId>
            <version>${project.version}</version>
         </dependency>
         2. in application.yml; active Openfeign into Sentinel 
         feign.sentinel.enabled=true
         3. EnableFeignClients  for main()
          import org.springframework.cloud.openfeign.EnableFeignClients;
         /watch?v=Lk4n3aqxAak    error
         /watch?v=fopMKalIBbU&list=PLmOn9nNkQxJGoM5wAmvrumw3kNrfRPv_L    error 
         /watch?v=EhwmQo-rx1o&list=PLmOn9nNkQxJGoM5wAmvrumw3kNrfRPv_L&index=2 error
  
         git log --oneline --graph --all

         ###SentinelResource save setting into Nacos
             watch?v=jUp_l8UfqVY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=137
         1.In POM<!-- 持久化用到-->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-datasource-nacos</artifactId>
        </dependency>  
         2.In yml
         datasource:
          ds1:
           nacos:
            server-addr: localhost:8848
            dataId: cloudalibaba-sentinel-service   // Data ID in "Create Configuration" in Nacos
            groupId: DEFAULT_GROUP
            data-type: json
            rule-type: flow
         
         3.JSON: [
            {"resource":"/rateLimit/byUrl", "limitApp":"default",
             "grade":1,"count":1,"strategy":0,"controlBehavior":0,
             "clusterMode":false 
            }
          ]
          {"resource":"/rateLimit/byUrl",  //资源名称 
           "limitApp":"default",  //来源应用
             "grade":1,  //阈值类型,0线程数，1QPS;
             "count":1,//单机阈值
             "strategy":0, //流控模式：0直接；1关联；2链路；
             "controlBehavior":0,流控效果：0快速失败；1Warm Up；2排队等待；
             "clusterMode":false 是否群集
            }


# 19 Nacos clustor & Persistent Storage by nacos-mysql.sql
   ##19.1 layout
    Require -> Nginx01...Nginx06 -> Nacos01...Nacos03 -> Mysql Clustor(Master&Slave)    
    
   Apache Derby is single database. https://db.apache.org/derby/
   github.com/alibaba/nacos/blob/develop/config/pom.xml
   nacos-mysql.sql in nacos-server-1.1\nacos\conf folder.

   >nacos.io/zh-cn/docs/cluster-mode-quick-start.html
   >nacos.io/zh-cn/docs/deployment.html
   >watch?v=b_X_s-qQs1w&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=106
   >watch?v=2QmCPOUyGAU&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=108

 ## 19.2
   ### USE nacos_config
   ### CREATE DATABASE nacos_config

   spring.datasource.platform=mysql
   db.num=1
   db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
   db.user=nacos_devtest
   db.password=youdontknow

  ## 19.3 
    watch?v=2QmCPOUyGAU&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=108
    >opt/nacos-server-1.1.4.tar.gz
    >tar - zxvf nacos-server-1.1.4.tar.gz
    >nacos
    > cp - r nacos /mynacos
    > cd mynacos

    three Nacos Nodes: 3333,4444,5555;
    Modify startup shell script: startup -p 3333
  ##19.4 Nacos Setup  /watch?v=5w6SAFLCsws&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=109

    > cd /mynacos/nacos/conf; >ll; > nacos-mysql.sql
    > cp appliction.properties.example application.properties ; > pwd;  /mynacos/nacos/conf
    ### In application.properties in /mynacos/nacos/conf
     >>spring.datasource.platform=mysql
     >>db.num=1
     >>db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
     >>db.user=nacos_devtest
     >>db.password=youdontknow
    > !wq
    ###   
    mysql>show database;   // nacos_config
    mysql>use nacos_config
    mysql>show tables;
    ### >cp cluster.conf.example cluster.conf
     > vim /mynacos/nacos/conf/cluster.conf
     >> 192.168.111.144:3333  
     >> 192.168.111.144:4444
     >> 192.168.111.144:5555
    #### IP must be know by hostname -i
    > hostname -i 
    >》 fe80::c7a1:aadb:1249:6c11%ens33 192.168.11.144 192.168.122.1 
    ### Modify ./startup.sh to run ./startup -p 3333
    > cp startup.sh startup.sh.bk
    >vim /mynacos/nacos/bin/startup.sh
    >>while getopts ":m:f:s" opt -> while getopts: ":m:f:s:p:" opt
    >> p)
          PORT=$OPTARG;;
       ?)
     #### nohup $JAVA ${JAVA_OPT} nacos.nacos >>${BASE_DIR}/logs/start.out 2>&1 &
     #### nohup $JAVA -Dserver.port=${PORT} ${JAVA_OPT} nacos.nacos >>${BASE_DIR}/logs/start.out 2>&1 &
    wq!
    >./startup -p 3333
 
 ## 19.5 Nginx Setup
    /watch?v=FwEQB3bq2_M&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=110
   ###
    > cp /usr/local/nginx/conf/nginx.conf nginx.conf.bk
    > vim /usr/local/nginx/conf/nginx.conf
    >> #gzip on;
    >> upstream cluster{
         server 127.0.0.1:3333;
         server 127.0.0.1:4444;
         server 127.0.0.1:5555;
       }
       server{
          listen   1111;
          ...
          location / {
             #root html;
             #index index.html index.htm;
             proxy_pass http://cluster;
          }
       } 
    ###> ./mynacos/nacos/bin/startup.sh -p 3333
      > ./mynacos/nacos/bin/startup.sh -p 4444 
      > ./mynacos/nacos/bin/startup.sh -p 5555  
     bin> ps -ef|grep nacos|grep -v grep |wc -l;
     bin> 3
     >/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf  ;;
     > ps -ef|grep nginx

    ### /watch?v=FwEQB3bq2_M&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=110
    >test：http://192.168.111.144:1111/nacos/#login
    mysql> select * from config_info;

--------------------------------------------------
               (Nacos Client:9002)
                     |
               (NGINX:1111)
        |            |                     |
(Nacos Server1:3333) (Nacos Server2:4444)  (Nacos Server3:5555)
             \       |      /
               (Mysql : 3306)
--------------------------------------------------

# 18 github.com/alibaba/nacos/blob/develop/config/pom.xml
    > group: TEST_GROUP
    > group: DEV_GROUP
    >namespace: 7df0f5a-6a53-4785-9686-dd460158e5d4
    >If we do not set up namespace, config source is "public" namespace.
    >namespace: 7df0f5a-6a53-4785-9686-dd460158e5d4  # It is namespace ID.
# 17 Nacos config  https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples
     ##17.1
     cloudalibaba-config-nacos-client3377
     spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html
        <!--需要引入该jar才能使bootstrap配置文件生效-->
        <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
     
    ## bootstrap.yml 
    server.port=3377
    spring.application.name=nacos-config-client
    spring.cloud.nacos.discovery.server-addr=localhost:8848
    spring.cloud.nacos.config.server-addr=localhost:8848
                             .file-extension=yaml
    ## application.yml
    ## localhost:8848/nacos
     Data ID:nacos-config-client-dev.yaml
     Group: DEFAULT_GROUP
     Configuration Content: config: 
                              info: v3       
    ##@RefreshScope & Data ID = ${spring:application:name}-${spring:profiles:active}.yaml
    localhost:8848  nacos/nacos

# 16 Nacos Naming Configuration  Service
     Nacos = Eureka + Config+Bus
     https://github.com/alibaba/Nacos   nacos.io
     https://github.com/alibaba/Nacos/releases

     start: /bin/startup.cmd
     localhost:8848/nacos/#/login    username: nacos/nacos
 
 ## 16.1 cloudalibaba-provider-payment9001
     <dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>2020.0.2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.alibaba.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>2.2.5.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html

     <dependency>
       <groupId>com.alibaba.cloud</groupId>
       <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
     </dependency>

     server.port=9001
     spring.application.name=nacos-email-provider
     spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
     management.endpoints.web.exposure.include=*
     
     @EnableDiscoveryClient // when it was removed, Nacos still can show it.  

 ##16.2 cloudalibaba-consumer-nacos-order83
   ###16.2.1application.properties/application.yml
   spring.application.name=nacos-email-consumer
   spring.cloud.nacos.discovery.server-addr=localhost:8848
   service-url.nacos-user-service=http://nacos-email-provider
   ###16.2.2 @SpringBootApplication with @EnableDiscoveryClient
   ###16.2.3 RestTemplate 
    
    @Configuration
    public class ApplicationContextConfig {
    @Bean
    @LoadBalanced
    public RestTemplate getRestTemplate(){
        return new RestTemplate();
    }    } 

   ###16.2.4
     @Value("${service-url.nacos-user-service}")
     private String INVOKE_URL; 
     String result = restTemplate.getForObject(INVOKE_URL+"/email/nacos/"+id,String.class);

# 15 github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md
     sping-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html
 
# 14 consul.io/intro/index.html  thank zhong yang.
  ## 14.1 springcloud.cc/spring-cloud-consul.html 
     learn.hashicorp.com/consul/getting-started/install.html
     consul --version
     consul agent -dev  //run and then, will generate a service localhost:8500

  ## 14.2 cloud-providerconsul-payment8006, cloud-consumerconsul-order80
      <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-discovery</artifactId>
      </dependency>

# 13 cloud-consumerzk-order80  zookeepr
    @Configuration
    public class ApplicationContextConfig
    {
        @Bean
        @LoadBalanced
        public RestTemplate getRestTemplate(){
            return new RestTemplate();
        }
    } 
# 12 cloud-provider-payment8004 zookeepr
  spring.cloud.zookeeper.connect-string=192.168.101.166:2161
    cloud:
      zookeeper:
        connect-string: 192.168.101.166:2161
# 11 @EnableDiscoveryClient with @SpringBootApplication
## 11.1 import org.springframework.cloud.client.discovery.DiscoveryClient;
    @GetMapping(value="/payment/discovery")
    public Object discovery(){
        List<String> services = discoveryClient.getServices();
        for(String e:services)
        {
            log.info("******element:"+e);
        }
        List<ServiceInstance> instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");
        for(ServiceInstance i: instances){
            log.info(i.getServiceId()+"\t"+i.getHost()+"\t"+i.getPort()+"\t"+i.getUri());
        }
        //        var a = new Object(services,instances);
        return this.discoveryClient;
    }
## 11.2 **Red Safe**  eureka.server.enable-self-preservation 
>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
>**In Eureka Server**
>>*default:* eureka.server.enable-self-preservation=true
>>eureka.server.eviction-interval-timer-in-ms: 2000
>>>    server:
>>>       enable-self-preservation: false
>>>       eviction-interval-timer-in-ms: 2000
>>> *THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.*

>**In Service server**
>>instance.lease-renewal-interval-in-seconds: 1 #default 30
>>instance.lease-expiration-duration-in-seconds: 2 #default 90
## 11.3 https://github.com/Netflix/eureka/wiki
# 10 cloud-eureka-server7001 
# 10.4 @LoadBalanced on RestTemplate and "http://CLOUD-PAYMENT-SERVICE" matched spring.application.name=cloud-payment-service
    spring:
      application:
        name: cloud-payment-service  # = CLOUD-PAYMENT-SERVICE
 *@LoadBalanced must be with using 'http://spring.application.name'*
 *instance.instance-id*: payment8001, *instance-id* showing in Status of Eureka dashboard
 *instance.prefer-ip-address*: true  #default true

# 10.3  clustor Eureka
    ** c:\Windows\System32\drivers\etc\hosts **
     127.0.0.1:7001 eureka7001.com
     127.0.0.1:7002 eureka7002.com 
# 10.2 @EnableEurekaClient
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
eureka:
  client:
    register-with-eureka: true
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:7001/eureka

# 10.1 @EnableEurekaServer single server.
       pom.xml 
       <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
            <!--        <version>3.0.3</version>-->
        </dependency>
   application.yml
eureka:
  instance:
    hostname: localhost
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

# 9 Code refactoring: cloud-api-commons
# 8 消费者cloud-consumer-order80
https://www.youtube.com/watch?v=8d6BvCZxPwQ&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=12
## 8.1 建module
## 8.2 改POM
## 8.3 写YML
## 8.4 主启动
## 8.5 业务类
RestTemplate
@RequestBody Payment payment
workspace.xml RunDashboard;

#18 Nacos- Naming Configuration Service
Nacos = Eureka+Config+Bus
github.com/alibaba/Nacos
https://github.com/alibaba/nacos/releases/tag/1.4.1
nacos.io/zh-cn/docs/cluster-mode-quick-start.html


https://www.youtube.com/watch?v=FMpIM5yS-SY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=96
https://www.youtube.com/watch?v=cwDUUhr4sOU&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=97

#17 Spring Cloud Alibaba
https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md
https://github.com/alibaba/spring-cloud-alibaba/
官网的参考手册：
https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html

#16 Spring Stream
https://www.youtube.com/watch?v=_x6eKocc0_8&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=86 
RabbitMQ有exchange, Kafka有Topic和Partitions区分；
Binder

#7 entities,dao,service,mapper
https://www.youtube.com/watch?v=vaTDClYcjIc&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=11
##7.1 create SQL; 
#6高并发高流量高可靠性
1000 QPS,  1百万 QPS;https://www.youtube.com/watch?v=SmkjJ7SQKBo
www.jianshu.com/p/251b76643d47 RocketMQ
High Concurrency and large flow, High Avaliablility： https://www.youtube.com/watch?v=SmkjJ7SQKBo  统一Id
#5. 热部署在Intellj中
##5.1 Adding devtools to your project
##5.2 Adding plugin to your pom.xml
##5.3 Enabling automatic build
##5.4 Update the value of
##5.5 重启IDEA
##5.1 Adding devtools to your project
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

##5.2 Adding plugin to your pom.xml （父工程中的pom.xml）
  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
            <exclude>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-configuration-processor</artifactId>
            </exclude>
          </excludes>
          <fork>true</fork>
          <addResources>true</addResources>
        </configuration>
      </plugin>
    </plugins>
  </build>
##5.3 Enabling automatic build
 File->Settings->Build,Execution,Deployment->Compiler->选上4个选项：
     Automatically show first error in editor; Display notification on build completion; Build project automatically;Compile independent mdules in parallel;

##5.4 Update the value of
 同时按下：ctrl+shift+Alt+/ and search for the registry. In the Registry, enable:
  compiler.automake.allow.when.app.running and actionSystem.assertFocusAccessFromEdt.

##5.5 重启IDEA

#4. 
##4.3 45.76.1.198:3306/root,schema:tivdb

##4.2 install docker on Kali
->sudo apt update
->curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
->sudo apt-get install gnupg
->echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | sudo tee /etc/apt/sources.list.d/docker.list
->sudo apt update
->sudo apt remove docker docker-engine docker.io
->sudo apt install docker-ce -y
->sudo systemctl start docker 或者 sudo /etc/init.d/docker start 
或者sudo service docker start

What you have to do is, run the linux subsystem as administrator by right clicking from start menu.
This will solve the issue and sudo service command will execute as it should as a sudo user.

systemd 
##4.1 install yum
->wget http://yum.baseurl.org/download/3.4/yum-3.4.3.tar.gz
->tar xvf yum-3.4.3.tar.gz
->cd yum-3.4.3
在Kali上没有成功
->sudo apt-get install yum
   sudo yum install docker
sudo apt install yum
yum check-update
yum update
yum clean all

#3.建微服务模块
##3.1 建module
##3.2 改POM
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>cloud20210413</artifactId>
        <groupId>com.jin.springcloud</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>cloud-provider-payment8001</artifactId>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.2.5</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
##3.3 写YML
server:
  port: 8081

spring:
  application:
    name: cloud-payment-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/db2021?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: Tw123456

  datasource2:
    url: jdbc:mysql://localhost:3306/sp_mall?useSSL=false&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: sQdAAj8eHN8yCXGn
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: jin.springcloud.entities    #所有entity别名类所在包


##3.4 主启动
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PaymentMain8001 {
    public static void main(String[] args){
        SpringApplication.run(PaymentMain8001.class, args);
    }
}
##3.5 业务类
### cloud-provider-payment8001微服务提供者支付Module模块
###   cloud-consumer-order80微服务消费者订单Module模块
CREATE TABLE test_payment(
id bigint(20) not null PRIMARY KEY auto_increment,
serial varchar(200) DEFAULT ''
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci;

Create table 'testpayment'(
'id' bigint(20) not null auto_increment comment 'id',
'serial' varchar(200) DEFAULT '',
PRIMARY KEY('id')
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4

#2.pom 父工程的POM
<packaging>pom</packaging>
<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!-- $Id: pom.xml 642118 2008-03-28 08:04:16Z reinhard $ -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <name>cloud20210413</name>
  <groupId>com.jin.springcloud</groupId>
  <artifactId>cloud20210413</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <!-- Version -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <junit.version>4.12</junit.version>
    <log4j.version>1.2.17</log4j.version>
    <lombok.version>1.16.18</lombok.version>
    <mysql.version>5.1.47</mysql.version>
    <druid.version>1.2.5</druid.version>
<!--    <mybatis.spring.boot.version1>1.3.0</mybatis.spring.boot.version1>-->
    <mybatis.spring.boot.version>2.1.4</mybatis.spring.boot.version>
  </properties>
  <!-- sub module: in sub module, do not need set groupId and version -->
  <dependencyManagement>
    <dependencies>
      <!--spring boot 2.4.4-->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.4.4</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--spring cloud-->
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>2020.0.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--spring cloud alibaba-->
      <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-alibaba-dependencies</artifactId>
        <version>2.2.5.RELEASE</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--mysql-->
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysql.version}</version>
      </dependency>
      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>druid</artifactId>
        <version>${druid.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>${mybatis.spring.boot.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
---------------------------------------------------------
#1.搭建工作空间workspace
##5.File Type过滤
  
##4.Java Compilerjava编译版本选8
  File->Build,Execution,Deployment->Compiler->Java Compiler->Module,Target bytecode version = 8;

##3.注解生效激活
  File->Build,Execution,Deployment->Compiler->Annotation Processors->Enable annotation processing(checked)

##2.Editor编辑器编码
 File->Settings->Editor->File Encodings -》 Global Encoding: UTF-8; Project Encoding: UTF-8; Default encoding for properties files: UTF-8; Transparent native-to-ascii conversion (checked)

##1.create new project
maven->create from archetype->maven-archetype-site
manve home path:C:/Users/JinTweebaa/.m2/wrapper/dists/apache-maven-3.6.3-bin/1iopthnavndlasol9gbrbg6bf2/apache-maven-3.6.3
User setting file:c:\users\jintweebaa\.m2\setting.xml
Local respository:c:\users\jintweebaa\.m2\repository

----------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=4wWM7MmfxXw&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=9
https://www.youtube.com/watch?v=AOepp1XLSR0&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=61
https://www.youtube.com/watch?v=TveD81ACbyw&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=31
https://www.youtube.com/watch?v=_1Y41mdkOSY&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=40 轮询 负载平衡 Ribbon
https://www.youtube.com/watch?v=Kkuqnkl9zOo&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=101
https://www.youtube.com/watch?v=qjOgz6K_Ums&list=PLmOn9nNkQxJGVG1ktTV4SedFWuyef_Pi0&index=107
namespace: 7df0f5a-6a53-4785-9686-dd460158e5d4
tools: Kali Linux

Thank Zhou Yang of Shang Gui Gu